[
  {
    "codes": "            insertionSort( a, left, right ); ",
    "blocks": []
  },
  {
    "codes": "    } ",
    "blocks": []
  },
  {
    "codes": " ",
    "blocks": []
  },
  {
    "codes": "    private static void insertionSort( int[ ] a, int left, int right ) ",
    "blocks": []
  },
  {
    "codes": "    { ",
    "blocks": []
  },
  {
    "codes": "        for( int p = left + 1; p <= right; p++ ) ",
    "blocks": [
      0,
      1,
      2,
      9,
      10
    ]
  },
  {
    "codes": "        { ",
    "blocks": [
      9,
      10
    ]
  },
  {
    "codes": "            int tmp = a[ p ]; ",
    "blocks": [
      3,
      9,
      10
    ]
  },
  {
    "codes": "            int j; ",
    "blocks": [
      9,
      10
    ]
  },
  {
    "codes": " ",
    "blocks": [
      9,
      10
    ]
  },
  {
    "codes": "            for( j = p; j > left && tmp < a[ j - 1 ]; j-- ) ",
    "blocks": [
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10
    ]
  },
  {
    "codes": "                a[ j ] = a[ j - 1 ]; ",
    "blocks": [
      8,
      9,
      10
    ]
  },
  {
    "codes": "            a[ j ] = tmp; ",
    "blocks": [
      9,
      10
    ]
  },
  {
    "codes": "        } ",
    "blocks": [
      9,
      10
    ]
  },
  {
    "codes": "    } ",
    "blocks": []
  },
  {
    "codes": " ",
    "blocks": []
  },
  {
    "codes": "    private static final int NUM_ITEMS = 1000; ",
    "blocks": []
  },
  {
    "codes": "    private static int theSeed = 1; ",
    "blocks": []
  },
  {
    "codes": " ",
    "blocks": []
  }
]